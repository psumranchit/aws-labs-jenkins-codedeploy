AWSTemplateFormatVersion: 2010-09-09
Description: Cloudformation for Unit Testing

Parameters:
  ### Project Naming Prefix ###
  JenkinsNamingPrefix:
    Description: Naming Prefix for Jenkins Environment
    Type: String
    Default: 'jenkins'
  
  StageNamingPrefix:
    Description: Naming Prefix for Testing Environment
    Type: String
    Default: 'stage'

  ### EC2 parameters ###
  LatestAmiId:
    Description: Gets the latest AMI from Systems Manager Parameter store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t3.micro
      - t3.small

  KeyPairName:
    Description: Key Pair to access Jenkins Server
    Type: String

  MinStage:
    Description: Minimum Numbers of Stage instance
    Type: String
    Default: '1'

  DesiredStage:
    Description: Desired Numbers of Stage instance
    Type: String
    Default: '1'

  MaxStage:
    Description: Maximum Numbers of Stage instance
    Type: String
    Default: '1'

  ### VPC Parameters ###
  VPCCidrBlock:
    Description: VPC CIDR block
    Type: String
    Default: '192.168.0.0/16'

  PublicCidrBlock1:
    Description: Public Subnet 1 CIDR
    Type: String
    Default: '192.168.1.0/24'

  PublicCidrBlock2:
    Description: Public Subnet 1 CIDR
    Type: String
    Default: '192.168.2.0/24'

  ManagementPublicIP:
    Description: Your Public IP Address (xx.xx.xx.xx/xx)
    Type: String
    Default: '0.0.0.0/0'
  
  ### CodeDeploy Parameters ###
  CodeDeployConfigName:
    Description: CodeDeploy Configuration Name
    Type: String
    Default: CodeDeployDefault.OneAtATime
    AllowedValues:
      - CodeDeployDefault.OneAtATime
      - CodeDeployDefault.HalfAtATime
      - CodeDeployDefault.AllAtATime
    
Resources:
  ### Creating Jenkins VPC ###
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref AWS::StackName
              - vpc

  ### Creating IGW for ingress/egress traffic ###
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref AWS::StackName
              - igw

  ### Attaching IGW to VPC ###
  IGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

  ### Creating new route table for VPC ###
  InternetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref AWS::StackName
              - public
              - rt

  ### Adding Route to/from Internet ###
  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref InternetRouteTable

  ### Creating Public Subnet ###
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref PublicCidrBlock1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref AWS::StackName
              - !Ref PublicCidrBlock1
              - public
              - az1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref PublicCidrBlock2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref AWS::StackName
              - !Ref PublicCidrBlock2
              - public
              - az2

  ### Add Subnet CIDR to public route table
  PublicSubnet1RouteToInternet:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InternetRouteTable
      SubnetId: !Ref PublicSubnet1
    DependsOn:
      - PublicSubnet1
      - InternetRouteTable

  PublicSubnet2RouteToInternet:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InternetRouteTable
      SubnetId: !Ref PublicSubnet2
    DependsOn:
      - PublicSubnet2
      - InternetRouteTable

  ### Creating Security Group ###
  JenkinsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: !Join
        - '-'
        - - !Ref JenkinsNamingPrefix
          - master
          - server
          - sg
      GroupDescription: 'Enable HTTP access port 8080 and SSH'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: !Ref ManagementPublicIP
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref ManagementPublicIP
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref JenkinsNamingPrefix
              - master
              - server
              - sg

  StageSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: !Join
        - '-'
        - - !Ref StageNamingPrefix
          - server
          - sg
      GroupDescription: 'Enable TCP port 5000 access'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5000'
          ToPort: '5000'
          SourceSecurityGroupId: !GetAtt StageAlbSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref StageNamingPrefix
              - server
              - sg

  ### Creating EC2 instance for Jenkins Server ###
  JenkinsServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref JenkinsSecurityGroup
      Tags:
      - Key: Name
        Value: !Join
          - '-'
          - - !Ref JenkinsNamingPrefix
            - master
            - server
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            yum update -y
            wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
            rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
            amazon-linux-extras install java-openjdk11 -y
            yum install jenkins -y
            systemctl enable jenkins
            systemctl start jenkins
            yum install git -y
    DependsOn:
      - PublicSubnet1
      - JenkinsSecurityGroup

  ### Creating Security Group for ALB ###
  StageAlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: !Join
        - '-'
        - - !Ref StageNamingPrefix
          - alb
          - sg
      GroupDescription: 'Enable TCP port 5000 access'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5000'
          ToPort: '5000'
          CidrIp: !Ref ManagementPublicIP
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref StageNamingPrefix
              - alb
              - sg

  ### Creating Target Group for ALB ###
  StageTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: !Sub '${StageNamingPrefix}-TG'
      Port: 5000
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC

  ### Creating ALB Listener ###
  StageAlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref StageTargetGroup
      LoadBalancerArn: !Ref StageAlb
      Port: 5000
      Protocol: HTTP

  ### Creating ALB ###
  StageAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      SecurityGroups:
        - !GetAtt StageAlbSecurityGroup.GroupId

  ### Creating Launch Template for ASG ###
  StageLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub ${StageNamingPrefix}-lt
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Arn: !GetAtt StageInstanceProfile.Arn
        SecurityGroupIds:
          - !GetAtt StageSecurityGroup.GroupId
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              yum update -y
              ## Install CodeDeploy agent
              yum install -y ruby
              yum install -y aws-cli
              cd /home/ec2-user
              aws s3 cp s3://aws-codedeploy-ap-southeast-1/latest/install .
              chmod +x ./install
              ./install auto
              ## Install Flask
              yum install pip -y
              pip install flask
              pip install requests
    DependsOn: StageInstanceProfile

  ### Creating ASG ###
  StageAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub '${StageNamingPrefix}-asg'
      LaunchTemplate:
        LaunchTemplateId: !Ref StageLaunchTemplate
        Version: !GetAtt StageLaunchTemplate.LatestVersionNumber
      MaxSize: !Ref MaxStage
      MinSize: !Ref MinStage
      DesiredCapacity: !Ref DesiredStage
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      TargetGroupARNs:
        - !Sub 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:${StageTargetGroup.TargetGroupFullName}'
      Tags:
        - Key: CodeDeploy
          Value: 'True'
          PropagateAtLaunch: True
        - Key: Name
          Value: !Sub '${StageNamingPrefix}-server'
          PropagateAtLaunch: True
    DependsOn:
      - StageTargetGroup
      - StageLaunchTemplate

  ### Creating IAM role for Stage server used by CodeDeploy ###
  StageEc2CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      RoleName: !Sub '${AWS::StackName}-CodeDeploy-role-for-EC2'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Sub '${AWS::StackName}-CodeDeploy-policy-for-EC2'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: 
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:ListBucket
            Resource: !Sub 'arn:aws:s3:::${S3CodeBuildBucket}/*'
          - Effect: Allow
            Action: 
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:ListBucket
            Resource: !Sub 'arn:aws:s3:::aws-codedeploy-${AWS::Region}/*'

  ### Creating Instance Profile for EC2 role ###
  StageInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Ref StageEc2CodeDeployRole
      Path: '/'
      Roles:
       - !Ref StageEc2CodeDeployRole
    DependsOn: StageEc2CodeDeployRole

  ### Create IAM Policy for new Jenkins User###
  JenkinsUserPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: JenkinsPolicy
      Path: '/'
      Description: 'Policy will be used for Jenkins Authorization to AWS'
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
            - logs:GetLogEvents
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${CodeBuild}:*'
          - Effect: Allow
            Action:
            - s3:GetBucketVersioning
            - s3:Put*
            Resource: !Sub 'arn:aws:s3:::${S3CodeBuildBucket}'
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:Put*
            Resource: !Sub 'arn:aws:s3:::${S3CodeBuildBucket}/*'
          - Effect: Allow
            Action:
            - codebuild:StartBuild
            - codebuild:BatchGetBuilds
            - codebuild:BatchGetProjects
            Resource: !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${CodeBuild}'
          - Effect: Allow
            Action: 
            - codedeploy:*
            Resource: !Sub 'arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:*:*'
    DependsOn:
      - CodeBuild
      - S3CodeBuildBucket

  ### Creating CodeBuildProject ###
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      RoleName: !Sub '${AWS::StackName}-CodeBuild-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Sub '${AWS::StackName}-CodeBuild-policy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: 
            - s3:PutObject
            - s3:GetObject
            - s3:GetObjectVersion
            Resource: !Sub 'arn:aws:s3:::${S3CodeBuildBucket}/*'
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*:*'

  ### Creating S3 Bucket for storing CodeBuild source codes and artifacts ###
  S3CodeBuildBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-${AWS::Region}-artifacts'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ### Attaching policy to S3Bucket. This is required for http request plugin ###
  S3CodeBuildBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3CodeBuildBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: 
          - s3:GetObject
          Resource: !Sub 'arn:aws:s3:::${S3CodeBuildBucket}/*'
          Principal: '*'
          Condition:
            IpAddress:
              aws:SourceIp: !GetAtt JenkinsServer.PublicIp
    DependsOn: JenkinsServer

  ### Creating CodeBuild Project ###
  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${AWS::StackName}-build'
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: S3
        EncryptionDisabled: True
        Packaging: ZIP
        Name: 'codebuild-artifact.zip'
        Location: !Ref S3CodeBuildBucket
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/amazonlinux2-x86_64-standard:4.0'
      Source:
        Type: S3
        Location: !Sub '${S3CodeBuildBucket}/src'
      TimeoutInMinutes: 10
    DependsOn:
      - S3CodeBuildBucket
      - CodeBuildRole

  ### Creating CodeDeploy Application
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub '${AWS::StackName}-app'
      ComputePlatform: Server
  
  ### Creating CodeDeploy DeploymentGroup
  CodeDeploy:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub ${CodeDeployApplication}-deployment-group
      AutoScalingGroups:
        - !Ref StageAsg
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentConfigName: !Ref CodeDeployConfigName

    DependsOn:
      - StageAsg
      - CodeDeployRole
      - S3CodeBuildBucket

  ### Creating IAM Role for CodeDeploy ###
  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      RoleName: !Sub '${AWS::StackName}-CodeDeploy-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codedeploy.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole'

##################
# Output Section #
##################
Outputs:
  JenkinsPublicDNS:
    Description: 'Jenkins Public IP Address'
    Value: !Sub 'http://${JenkinsServer.PublicIp}:8080'

  StageAlbDns:
    Description: 'Stage ALB DNS'
    Value: !Sub '${StageAlb.DNSName}:5000'

  CodeBuildProjectName:
    Description: 'CodeBuild Project Name used for input in Jenkins project configuration'
    Value: !Ref CodeBuild

  CodeDeployApplicationName:
    Description: 'CodeDeploy Application Name used for input in Jenkins project configuration'
    Value: !Ref CodeDeployApplication

  CodeDeployDeploymentGroup:
    Description: 'CodeDeploy Deployment Group used for input in Jenkins project configuration'
    Value: !Ref CodeDeploy

  CodeDeployDeploymentConfig:
    Description: 'CodeDeploy Deployment Config used for input in Jenkins project configuration'
    Value: !Ref CodeDeployConfigName

  S3BucketURL:
    Description: 'S3Bucket URL used for input in Jenkins project configuration'
    Value: !Sub 'http://s3-${AWS::Region}.amazonaws.com/${S3CodeBuildBucket}/codebuild-artifact.zip'

  S3BucketName:
    Description: 'S3Bucket Name used for input in Jenkins project configuration'
    Value: !Ref S3CodeBuildBucket